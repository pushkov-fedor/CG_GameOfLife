package graphics;

import Utilities.Mode;
import model.World;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.ImageObserver;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

public class Toolbar {
    private JPanel toolbar;
    private JButton replaceButton;
    private JButton optionsButton;
    private JButton resetButton;
    private JButton aboutButton;
    private JButton XORButton;
    private JButton startButton;
    private JButton stopButton;
    private JButton nextButton;
    private JButton newDocumentButton;

    private World world;
    private Field field;
    private ImageObserver observer;

    ScheduledExecutorService scheduledExecutorService;
    Runnable startGame;
    ScheduledFuture<?> startGameHandler = null;

    public Toolbar() {
        scheduledExecutorService =
                Executors.newScheduledThreadPool(1);
        startGame = new Runnable() {
            @Override
            public void run() {
                world.nextGeneration();
                world.calculateImpact();
                GraphUtills.drawWorld(world, field.getGraphics(), observer);
            }
        };

        nextButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                world.nextGeneration();
                world.calculateImpact();
                GraphUtills.drawWorld(world, field.getGraphics(), observer);
            }
        });

        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startGameHandler = scheduledExecutorService.scheduleAtFixedRate(startGame, 0, 1, TimeUnit.SECONDS);
            }
        });

        stopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (startGameHandler != null) {
                    startGameHandler.cancel(true);
                }
            }
        });
        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                world.resetWorld();
                world.calculateImpact();
                GraphUtills.drawWorld(world, field.getGraphics(), observer);
            }
        });
        XORButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                field.mode = Mode.XOR;
            }
        });
        replaceButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                field.mode = Mode.Replace;
            }
        });
        newDocumentButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
        optionsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Options options = new Options(world, field, observer);
                options.pack();
                options.setVisible(true);
            }
        });
    }

    public void setWorld(World world) {
        this.world = world;
    }

    public void setField(Field field) {
        this.field = field;
    }

    public void setObserver(ImageObserver observer) {
        this.observer = observer;
    }


    public JPanel getToolbar() {
        return toolbar;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        toolbar = new JPanel();
        toolbar.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        toolbar.setBackground(new Color(-1));
        newDocumentButton = new JButton();
        newDocumentButton.setBackground(new Color(-1));
        newDocumentButton.setHideActionText(true);
        newDocumentButton.setIcon(new ImageIcon(getClass().getResource("/new.png")));
        newDocumentButton.setText("");
        newDocumentButton.setToolTipText("New Document");
        toolbar.add(newDocumentButton);
        XORButton = new JButton();
        XORButton.setBackground(new Color(-1));
        XORButton.setForeground(new Color(-1));
        XORButton.setIcon(new ImageIcon(getClass().getResource("/xor.png")));
        XORButton.setText("");
        XORButton.setToolTipText("XOR");
        toolbar.add(XORButton);
        replaceButton = new JButton();
        replaceButton.setBackground(new Color(-1));
        replaceButton.setForeground(new Color(-1));
        replaceButton.setIcon(new ImageIcon(getClass().getResource("/replace.png")));
        replaceButton.setText("");
        replaceButton.setToolTipText("Replace");
        toolbar.add(replaceButton);
        optionsButton = new JButton();
        optionsButton.setBackground(new Color(-1));
        optionsButton.setForeground(new Color(-1));
        optionsButton.setHorizontalTextPosition(2);
        optionsButton.setIcon(new ImageIcon(getClass().getResource("/options.png")));
        optionsButton.setText("");
        optionsButton.setToolTipText("Options");
        toolbar.add(optionsButton);
        resetButton = new JButton();
        resetButton.setBackground(new Color(-1));
        resetButton.setForeground(new Color(-1));
        resetButton.setIcon(new ImageIcon(getClass().getResource("/reset.png")));
        resetButton.setText("");
        resetButton.setToolTipText("Reset");
        toolbar.add(resetButton);
        aboutButton = new JButton();
        aboutButton.setBackground(new Color(-1));
        aboutButton.setForeground(new Color(-1));
        aboutButton.setIcon(new ImageIcon(getClass().getResource("/about.png")));
        aboutButton.setText("");
        aboutButton.setToolTipText("About");
        toolbar.add(aboutButton);
        startButton = new JButton();
        startButton.setBackground(new Color(-1));
        startButton.setForeground(new Color(-1));
        startButton.setIcon(new ImageIcon(getClass().getResource("/start.png")));
        startButton.setText("");
        startButton.setToolTipText("Start");
        toolbar.add(startButton);
        stopButton = new JButton();
        stopButton.setBackground(new Color(-1));
        stopButton.setForeground(new Color(-1));
        stopButton.setIcon(new ImageIcon(getClass().getResource("/stop.png")));
        stopButton.setText("");
        stopButton.setToolTipText("Stop");
        toolbar.add(stopButton);
        nextButton = new JButton();
        nextButton.setBackground(new Color(-1));
        nextButton.setEnabled(true);
        nextButton.setForeground(new Color(-1));
        nextButton.setIcon(new ImageIcon(getClass().getResource("/next.png")));
        nextButton.setText("");
        nextButton.setToolTipText("Next");
        toolbar.add(nextButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return toolbar;
    }
}
